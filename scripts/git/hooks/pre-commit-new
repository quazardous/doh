#!/bin/bash
#
# pre-commit hook - Lint staged markdown files before commit
#
# This hook uses the same linting functions as the main lint script
# ensuring consistency between manual and automatic linting
#
# Installation:
#   ln -sf ../../dev-tools/hooks/pre-commit-new .git/hooks/pre-commit
#   chmod +x dev-tools/hooks/pre-commit-new

# Get script directory and project root
HOOK_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(cd "$HOOK_DIR/../.." && pwd)"

# Load shared linting library
source "$PROJECT_ROOT/dev-tools/lib/lint-core.sh"

# Configuration
LINT_MODE="${LINT_MODE:-fix}"  # Can be overridden with: LINT_MODE=check git commit
VERBOSE="${VERBOSE:-false}"

# Main hook logic
main() {
    # Check if linting tools are installed
    if ! check_linting_tools; then
        print_error "Linting tools not installed. Commit blocked."
        echo "Install with:"
        echo "  npm install -g prettier markdownlint-cli"
        echo "  pip install codespell"
        echo ""
        echo "Or bypass with: git commit --no-verify"
        exit 1
    fi
    
    # Get staged markdown files
    local staged_files
    mapfile -t staged_files < <(get_staged_markdown_files)
    
    # Exit early if no markdown files staged
    if [[ ${#staged_files[@]} -eq 0 ]]; then
        exit 0
    fi
    
    echo "üîç Pre-commit: Linting ${#staged_files[@]} staged markdown file(s)..."
    echo ""
    
    local failed_files=()
    local fixed_files=()
    
    # Process each staged file
    for file in "${staged_files[@]}"; do
        if [[ ! -f "$file" ]]; then
            continue
        fi
        
        echo "üìù Checking: $file"
        
        # Lint the file
        if lint_file "$file" "$LINT_MODE"; then
            if [[ "$LINT_MODE" == "fix" ]]; then
                # Check if file was modified by linting
                if ! git diff --quiet "$file"; then
                    fixed_files+=("$file")
                    print_success "Fixed and clean"
                else
                    print_success "Already clean"
                fi
            else
                print_success "Clean"
            fi
        else
            failed_files+=("$file")
            if [[ "$LINT_MODE" == "fix" ]]; then
                print_warning "Issues remain after auto-fix"
            else
                print_error "Issues found"
            fi
        fi
        echo ""
    done
    
    # Handle fixed files (re-stage them)
    if [[ ${#fixed_files[@]} -gt 0 ]]; then
        echo "üìù Re-staging auto-fixed files..."
        for file in "${fixed_files[@]}"; do
            git add "$file"
            echo "  ‚úÖ Re-staged: $file"
        done
        echo ""
    fi
    
    # Handle failed files
    if [[ ${#failed_files[@]} -gt 0 ]]; then
        echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
        print_error "Linting failed for ${#failed_files[@]} file(s):"
        echo ""
        for file in "${failed_files[@]}"; do
            echo "  ‚ùå $file"
        done
        echo ""
        echo "Options:"
        echo "  1. Fix manually: edit the files and try again"
        echo "  2. Auto-fix: run 'make lint-staged'"
        echo "  3. Check issues: run './scripts/lint-files.sh --check ${failed_files[*]}'"
        echo "  4. Bypass (not recommended): git commit --no-verify"
        echo ""
        exit 1
    fi
    
    # Success
    if [[ ${#fixed_files[@]} -gt 0 ]]; then
        echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
        print_success "All files clean (${#fixed_files[@]} auto-fixed)"
        echo "Files were automatically fixed and re-staged."
    else
        print_success "All staged markdown files are clean!"
    fi
    
    exit 0
}

# Handle exceptions for special commits
handle_special_cases() {
    # Check if this is a merge commit
    if git rev-parse --verify MERGE_HEAD &> /dev/null; then
        if [[ "$VERBOSE" == "true" ]]; then
            echo "‚ÑπÔ∏è  Merge commit detected, skipping linting"
        fi
        exit 0
    fi
    
    # Check if this is a rebase
    if [[ -d "$(git rev-parse --git-dir)/rebase-merge" ]] || [[ -d "$(git rev-parse --git-dir)/rebase-apply" ]]; then
        if [[ "$VERBOSE" == "true" ]]; then
            echo "‚ÑπÔ∏è  Rebase in progress, skipping linting"
        fi
        exit 0
    fi
    
    # Check for CI environment
    if [[ "${CI:-false}" == "true" ]]; then
        if [[ "$VERBOSE" == "true" ]]; then
            echo "‚ÑπÔ∏è  CI environment detected, skipping linting"
        fi
        exit 0
    fi
}

# Run the hook
handle_special_cases
main