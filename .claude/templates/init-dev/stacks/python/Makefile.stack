# Python specific linting targets

lint-check: ## Check code style (no fixes)
	@echo "üîç Python linting checks..."
	docker compose exec linter flake8 src/
	docker compose exec linter pylint src/
	docker compose exec linter mypy src/
	docker compose exec linter bandit -r src/

lint-autofix: ## Auto-fix code style issues
	@echo "üîß Python auto-fixes..."
	docker compose exec linter autopep8 --in-place --recursive src/
	docker compose exec linter isort src/
	docker compose exec linter black src/

format-code: ## Format/prettify code  
	@echo "‚ú® Python formatting..."
	docker compose exec linter black src/
	docker compose exec linter isort src/

# Python specific targets
pip-install: ## Install pip dependencies in linter container
	docker compose exec linter pip install -r requirements.txt

pip-outdated: ## Check for outdated packages
	docker compose exec linter pip list --outdated

pip-upgrade: ## Upgrade packages (use with caution)
	docker compose exec linter pip install --upgrade -r requirements.txt

type-check: ## Run mypy type checking
	docker compose exec linter mypy src/

security-check: ## Run security audit
	docker compose exec linter bandit -r src/
	docker compose exec linter safety check

pytest: ## Run pytest tests
	docker compose exec -e DJANGO_SETTINGS_MODULE={{PROJECT_NAME}}.settings.test ${APP_CONTAINER:-app} pytest tests/

test: ## Run all tests (alias for pytest)
	docker compose exec -e DJANGO_SETTINGS_MODULE={{PROJECT_NAME}}.settings.test ${APP_CONTAINER:-app} pytest tests/

test-filter: ## Run specific test (use: make test-filter FILTER="test_user")
	docker compose exec -e DJANGO_SETTINGS_MODULE={{PROJECT_NAME}}.settings.test ${APP_CONTAINER:-app} pytest tests/ -k $(FILTER)

test-coverage: ## Run tests with coverage report
	docker compose exec -e DJANGO_SETTINGS_MODULE={{PROJECT_NAME}}.settings.test ${APP_CONTAINER:-app} coverage run -m pytest tests/
	docker compose exec -e DJANGO_SETTINGS_MODULE={{PROJECT_NAME}}.settings.test ${APP_CONTAINER:-app} coverage html --directory=var/coverage

# Note: coverage commands moved to test-coverage above

# Supervisord Process Management
status: ## Show supervisord process status
	docker compose exec ${APP_CONTAINER:-app} supervisorctl status

restart-web: ## Restart web server processes only
	docker compose exec ${APP_CONTAINER:-app} supervisorctl restart web:*

restart-workers: ## Restart worker processes only
	docker compose exec ${APP_CONTAINER:-app} supervisorctl restart workers:*

restart-all: ## Restart all processes
	docker compose exec ${APP_CONTAINER:-app} supervisorctl restart all

logs-web: ## Show web server logs
	docker compose exec ${APP_CONTAINER:-app} supervisorctl tail web:*

logs-workers: ## Show worker logs
	docker compose exec ${APP_CONTAINER:-app} supervisorctl tail workers:*

# Debug Workers (Alternative to supervisord)
worker-debug: ## Run single worker in foreground for debugging
	docker compose exec ${APP_CONTAINER:-app} celery -A {{PROJECT_NAME}} worker --loglevel=debug

worker-shell: ## Open separate shell for manual worker debugging
	docker compose run --rm ${APP_CONTAINER:-app} /bin/bash

worker-inspect: ## Inspect active tasks and workers
	docker compose exec ${APP_CONTAINER:-app} celery -A {{PROJECT_NAME}} inspect active
	docker compose exec ${APP_CONTAINER:-app} celery -A {{PROJECT_NAME}} inspect stats