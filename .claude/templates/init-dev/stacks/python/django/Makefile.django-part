# DOH Django Extension for Makefile.seed
# =================================================================
# 
# ‚ö†Ô∏è THIS FILE EXTENDS Makefile.seed - NOT A STANDALONE MAKEFILE
# 
# AI GENERATION PROCESS:
# 1. Start with complete Makefile.seed content (foundation)
# 2. Add these Django-specific targets AFTER the seed
# 3. Result: ONE Makefile with seed + these additions
# 4. Remove redundant parts (help, common targets) - they're in seed
# 
# CRITICAL: These targets use variables from Makefile.seed:
# - $(DOCKER_COMPOSE) - Docker command with env-file
# - ${EXEC_CONTAINER} - For container execution
# - ${APP_CONTAINER} - Main app container name
# - All other patterns defined in seed
# =================================================================

# Django-specific PHONY targets (common ones are in Makefile.seed)
.PHONY: django-init django-shell django-migrate django-makemigrations django-createsuperuser
.PHONY: django-collectstatic hello-doh pip-install test-pytest

# =================================================================
# DJANGO-SPECIFIC CONFIG INITIALIZATION (extends seed env-config)
# =================================================================

env-config: ## Initialize local config files from -docker templates (Django + common)
	@echo "$(GREEN)Initializing Django configuration files...$(RESET)"
	# @AI-Kitchen: MERGE - Add to seed env-config target
	# This adds Django-specific files to the common ones from seed
	$(call copy-dist-config,./.env-docker,./.env)
	$(call copy-dist-config,./requirements.txt-docker,./requirements.txt)
	$(call copy-dist-config,./myproject/settings/local.py-docker,./myproject/settings/local.py)
	$(call copy-dist-config,./pytest.ini-docker,./pytest.ini)
	@echo "$(GREEN)Django configuration files ready! Customize as needed.$(RESET)"
	@echo "$(YELLOW)üí° Django-specific: .env, requirements.txt, local.py, pytest.ini$(RESET)"

# NOTE: help target is in Makefile.seed
# NOTE: Common targets (dev, down, sh, logs) are in Makefile.seed

# =================================================================
# DJANGO-SPECIFIC TARGETS (extend Makefile.seed)
# =================================================================

django-init: ## Initialize Django project with django-admin startproject
	@echo "üêç Initializing Django project..."
	@echo "üìã Command: ${EXEC_CONTAINER} ${APP_CONTAINER} pip install -r requirements.txt"
	@${EXEC_CONTAINER} ${APP_CONTAINER} pip install -r requirements.txt
	@echo "üìã Command: ${EXEC_CONTAINER} ${APP_CONTAINER} django-admin startproject {{PROJECT_NAME}} ."
	@${EXEC_CONTAINER} ${APP_CONTAINER} django-admin startproject {{PROJECT_NAME}} .
	@echo "üìã Command: ${EXEC_CONTAINER} ${APP_CONTAINER} python manage.py migrate"
	@${EXEC_CONTAINER} ${APP_CONTAINER} python manage.py migrate
	@echo "‚úÖ Django project '{{PROJECT_NAME}}' initialized!"

django-shell: ## Open Django shell
	@echo "üìã Command: ${EXEC_CONTAINER} ${APP_CONTAINER} python manage.py shell"
	@${EXEC_CONTAINER} ${APP_CONTAINER} python manage.py shell

django-migrate: ## Run Django migrations
	@echo "üìã Command: ${EXEC_CONTAINER} ${APP_CONTAINER} python manage.py migrate"
	@${EXEC_CONTAINER} ${APP_CONTAINER} python manage.py migrate

django-makemigrations: ## Create Django migrations
	@echo "üìã Command: ${EXEC_CONTAINER} ${APP_CONTAINER} python manage.py makemigrations"
	@${EXEC_CONTAINER} ${APP_CONTAINER} python manage.py makemigrations

django-createsuperuser: ## Create Django superuser
	@echo "üìã Command: ${EXEC_CONTAINER} ${APP_CONTAINER} python manage.py createsuperuser"
	@${EXEC_CONTAINER} ${APP_CONTAINER} python manage.py createsuperuser

django-collectstatic: ## Collect static files
	@echo "üìã Command: ${EXEC_CONTAINER} ${APP_CONTAINER} python manage.py collectstatic --noinput"
	@${EXEC_CONTAINER} ${APP_CONTAINER} python manage.py collectstatic --noinput

hello-doh: ## Create Django Hello World app and test complete stack
	@echo "üêç Creating Django Hello World..."
	@echo "üìã Command: ${EXEC_CONTAINER} ${APP_CONTAINER} python manage.py startapp hello"
	@${EXEC_CONTAINER} ${APP_CONTAINER} python manage.py startapp hello
	@echo "ü§ñ AI will generate: hello/views.py, urls.py, and management/commands/hello.py"
	@echo "üéØ DOH_HELLOWORLD validation included in web view and CLI command"

# dev-setup in Makefile.seed calls env-config first, then this extends it
dev-setup: env-config ## Install all dependencies (Django + Node.js if needed)
	@echo "üêç Installing Django dependencies..."
	@echo "üìã Command: ${EXEC_CONTAINER} ${APP_CONTAINER} pip install -r requirements.txt"
	@${EXEC_CONTAINER} ${APP_CONTAINER} pip install -r requirements.txt
	# @AI-Kitchen: CONDITIONAL - Include if frontend stack detected
	# @AI-Kitchen: CHOOSE - npm/yarn/pnpm based on lock files or user choice
	# Example: @${EXEC_CONTAINER} ${APP_CONTAINER} npm install
	@echo "‚úÖ Django dependencies installed!"

pip-install: ## Install Python/Django dependencies
	@echo "üì¶ Installing Python dependencies..."
	@echo "üìã Command: ${EXEC_CONTAINER} ${APP_CONTAINER} pip install -r requirements.txt"
	@${EXEC_CONTAINER} ${APP_CONTAINER} pip install -r requirements.txt

# =================================================================
# TESTING & QUALITY
# =================================================================

test: ## Run Django tests
	@echo "üß™ Running Django tests..."
	@echo "üìã Command: ${EXEC_CONTAINER} ${APP_CONTAINER} python manage.py test"
	@${EXEC_CONTAINER} ${APP_CONTAINER} python manage.py test

test-pytest: ## Run tests with pytest
	@echo "üß™ Running pytest tests..."
	@echo "üìã Command: ${EXEC_CONTAINER} ${APP_CONTAINER} pytest"
	@${EXEC_CONTAINER} ${APP_CONTAINER} pytest

lint-check: ## Check code quality
	@echo "üîç Running Python linters..."
	@echo "üìã Command: $(DOCKER_COMPOSE) run --rm linter black --check ."
	@$(DOCKER_COMPOSE) run --rm linter black --check .
	@$(DOCKER_COMPOSE) run --rm linter flake8 .
	@$(DOCKER_COMPOSE) run --rm linter mypy .

# NOTE: Common process management targets (status, restart-web, restart-all) are in Makefile.seed
# NOTE: All variables and patterns are defined in Makefile.seed
# NOTE: Always use $(DOCKER_COMPOSE) and other seed variables