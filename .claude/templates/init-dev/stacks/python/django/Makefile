# DOH Django Development Makefile
# Generated by /doh:init-dev for Django stack
# =================================================================

# Framework identification (required for shared Makefile.common)
FRAMEWORK_NAME = Django
FRAMEWORK_EMOJI = üêç
DATABASE_NAME = {{DATABASE}}
FRONTEND_NAME = {{FRONTEND}}
FRAMEWORK_INIT = django-init
HTTPS_PORT = {{HTTPS_PORT}}
TRAEFIK_PORT = {{TRAEFIK_PORT}}
DB_ADMIN = {{DB_ADMIN}}

# Include shared variables and targets
include {{CONTAINER_DIR}}/Makefile.common

# Django-specific commands - Real Django management (using direct EXEC pattern)
# Pattern: ${EXEC_CONTAINER} ${APP_CONTAINER} command

# Django-specific PHONY targets (common ones are in Makefile.common)
.PHONY: django-init django-shell django-migrate django-makemigrations django-createsuperuser
.PHONY: django-collectstatic hello-doh pip-install test-pytest dev-setup

# =================================================================
# DOCUMENTATION
# =================================================================

help: ## Show Django development commands
	$(call help_header)
	$(call help_footer)

# Common development environment targets (dev, down, sh, logs) are in Makefile.common

# =================================================================
# DJANGO PROJECT INITIALIZATION
# =================================================================

django-init: ## Initialize Django project with django-admin startproject
	@echo "üêç Initializing Django project..."
	@echo "üìã Command: ${EXEC_CONTAINER} ${APP_CONTAINER} pip install -r requirements.txt"
	@${EXEC_CONTAINER} ${APP_CONTAINER} pip install -r requirements.txt
	@echo "üìã Command: ${EXEC_CONTAINER} ${APP_CONTAINER} django-admin startproject {{PROJECT_NAME}} ."
	@${EXEC_CONTAINER} ${APP_CONTAINER} django-admin startproject {{PROJECT_NAME}} .
	@echo "üìã Command: ${EXEC_CONTAINER} ${APP_CONTAINER} python manage.py migrate"
	@${EXEC_CONTAINER} ${APP_CONTAINER} python manage.py migrate
	@echo "‚úÖ Django project '{{PROJECT_NAME}}' initialized!"

django-shell: ## Open Django shell
	@echo "üìã Command: ${EXEC_CONTAINER} ${APP_CONTAINER} python manage.py shell"
	@${EXEC_CONTAINER} ${APP_CONTAINER} python manage.py shell

django-migrate: ## Run Django migrations
	@echo "üìã Command: ${EXEC_CONTAINER} ${APP_CONTAINER} python manage.py migrate"
	@${EXEC_CONTAINER} ${APP_CONTAINER} python manage.py migrate

django-makemigrations: ## Create Django migrations
	@echo "üìã Command: ${EXEC_CONTAINER} ${APP_CONTAINER} python manage.py makemigrations"
	@${EXEC_CONTAINER} ${APP_CONTAINER} python manage.py makemigrations

django-createsuperuser: ## Create Django superuser
	@echo "üìã Command: ${EXEC_CONTAINER} ${APP_CONTAINER} python manage.py createsuperuser"
	@${EXEC_CONTAINER} ${APP_CONTAINER} python manage.py createsuperuser

django-collectstatic: ## Collect static files
	@echo "üìã Command: ${EXEC_CONTAINER} ${APP_CONTAINER} python manage.py collectstatic --noinput"
	@${EXEC_CONTAINER} ${APP_CONTAINER} python manage.py collectstatic --noinput

hello-doh: ## Django Hello World + DOH validation + CLI command
	@echo "üêç Creating Django Hello World..."
	@echo "üìã Command: ${EXEC_CONTAINER} ${APP_CONTAINER} python manage.py startapp hello"
	@${EXEC_CONTAINER} ${APP_CONTAINER} python manage.py startapp hello
	@echo "ü§ñ AI will generate: hello/views.py, urls.py, and management/commands/hello.py"
	@echo "üéØ DOH_HELLOWORLD validation included in web view and CLI command"

# =================================================================
# DEPENDENCY MANAGEMENT
# =================================================================
# Common targets (dev-setup, npm-install, ssl-setup, frontend-dev) are in Makefile.common

dev-setup: ## Install Django dependencies (pip + npm)
	@echo "üêç Installing Django dependencies..."
	@echo "üìã Command: ${EXEC_CONTAINER} ${APP_CONTAINER} pip install -r requirements.txt"
	@${EXEC_CONTAINER} ${APP_CONTAINER} pip install -r requirements.txt
	@echo "üìã Command: ${EXEC_CONTAINER} ${APP_CONTAINER} npm install"
	# ‚ö†Ô∏è Kitchen AI: Remove this line if no Node.js/webpack/frontend needed
	# ‚ö†Ô∏è Kitchen AI: Replace with yarn/pnpm if detected or chosen
	@${EXEC_CONTAINER} ${APP_CONTAINER} npm install
	@echo "‚úÖ Django dependencies installed!"

pip-install: ## Install Python/Django dependencies
	@echo "üì¶ Installing Python dependencies..."
	@echo "üìã Command: ${EXEC_CONTAINER} ${APP_CONTAINER} pip install -r requirements.txt"
	@${EXEC_CONTAINER} ${APP_CONTAINER} pip install -r requirements.txt

# =================================================================
# TESTING & QUALITY
# =================================================================

test: ## Run Django tests
	@echo "üß™ Running Django tests..."
	@echo "üìã Command: ${EXEC_CONTAINER} ${APP_CONTAINER} python manage.py test"
	@${EXEC_CONTAINER} ${APP_CONTAINER} python manage.py test

test-pytest: ## Run tests with pytest
	@echo "üß™ Running pytest tests..."
	@echo "üìã Command: ${EXEC_CONTAINER} ${APP_CONTAINER} pytest"
	@${EXEC_CONTAINER} ${APP_CONTAINER} pytest

lint-check: ## Check code quality
	@echo "üîç Running Python linters..."
	@echo "üìã Command: $(DOCKER_COMPOSE) run --rm linter black --check ."
	@$(DOCKER_COMPOSE) run --rm linter black --check .
	@$(DOCKER_COMPOSE) run --rm linter flake8 .
	@$(DOCKER_COMPOSE) run --rm linter mypy .

# Common process management targets (status, restart-web, restart-all) are in Makefile.common

# =================================================================
# HINTS & DEBUGGING
# =================================================================
# Commands always show exact Docker command before execution
# All variables documented at top for easy modification
# Use $(DOCKER_COMPOSE) with --env-file ./docker-compose.env