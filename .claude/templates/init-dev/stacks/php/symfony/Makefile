# DOH Symfony Development Makefile
# Generated by /doh:init-dev for Symfony stack
# =================================================================

# Framework identification (required for shared Makefile.common)
FRAMEWORK_NAME = Symfony
FRAMEWORK_EMOJI = üéº
DATABASE_NAME = {{DATABASE}}
FRONTEND_NAME = {{FRONTEND}}
FRAMEWORK_INIT = symfony-new
HTTPS_PORT = {{HTTPS_PORT}}
TRAEFIK_PORT = {{TRAEFIK_PORT}}
DB_ADMIN = {{DB_ADMIN}}

# Include shared variables and targets
include {{CONTAINER_DIR}}/Makefile.common

# Symfony-specific commands - Real Symfony CLI (using EXEC for persistent containers)
# Keep only frequently used variables (5+ uses)
SYMFONY_CONSOLE = ${EXEC_CONTAINER} ${APP_CONTAINER} php bin/console

# Symfony-specific PHONY targets (common ones are in Makefile.common)
.PHONY: symfony-new symfony-console symfony-cache-clear symfony-cache-warmup symfony-doctrine
.PHONY: doctrine-create doctrine-migrate doctrine-fixtures make-entity make-migration
.PHONY: composer-install composer-update make-controller make-form make-crud make-user
.PHONY: hello-doh lint-fix dev-setup

# =================================================================
# DOCUMENTATION
# =================================================================

help: ## Show Symfony development commands
	$(call help_header)
	$(call help_footer)

# Common development environment targets (dev, down, sh, logs) are in Makefile.common

# =================================================================
# SYMFONY PROJECT INITIALIZATION
# =================================================================

symfony-new: ## Initialize Symfony project with Symfony CLI
	@echo "üéº Creating new Symfony project..."
	@echo "üìã Command: ${EXEC_CONTAINER} ${APP_CONTAINER} composer install"
	@${EXEC_CONTAINER} ${APP_CONTAINER} composer install
	@echo "üìã Command: ${EXEC_CONTAINER} ${APP_CONTAINER} symfony new {{PROJECT_NAME}} --version={{SYMFONY_VERSION}}"
	@${EXEC_CONTAINER} ${APP_CONTAINER} symfony new {{PROJECT_NAME}} --version={{SYMFONY_VERSION}}
	@echo "üìã Command: $(SYMFONY_CONSOLE) doctrine:database:create --if-not-exists"
	@$(SYMFONY_CONSOLE) doctrine:database:create --if-not-exists
	@echo "‚úÖ Symfony project '{{PROJECT_NAME}}' initialized!"

symfony-console: ## Open Symfony console (interactive)
	@echo "üìã Command: $(SYMFONY_CONSOLE)"
	@$(SYMFONY_CONSOLE)

symfony-cache-clear: ## Clear Symfony cache
	@echo "üìã Command: $(SYMFONY_CONSOLE) cache:clear"
	@$(SYMFONY_CONSOLE) cache:clear

symfony-cache-warmup: ## Warmup Symfony cache
	@echo "üìã Command: $(SYMFONY_CONSOLE) cache:warmup"
	@$(SYMFONY_CONSOLE) cache:warmup

# =================================================================
# DOCTRINE DATABASE COMMANDS
# =================================================================

symfony-doctrine: ## Show Doctrine commands
	@echo "üìã Command: $(SYMFONY_CONSOLE) list doctrine"
	@$(SYMFONY_CONSOLE) list doctrine

doctrine-create: ## Create database
	@echo "üìã Command: $(SYMFONY_CONSOLE) doctrine:database:create"
	@$(SYMFONY_CONSOLE) doctrine:database:create

doctrine-migrate: ## Run Doctrine migrations
	@echo "üìã Command: $(SYMFONY_CONSOLE) doctrine:migrations:migrate"
	@$(SYMFONY_CONSOLE) doctrine:migrations:migrate

doctrine-fixtures: ## Load Doctrine fixtures
	@echo "üìã Command: $(SYMFONY_CONSOLE) doctrine:fixtures:load --no-interaction"
	@$(SYMFONY_CONSOLE) doctrine:fixtures:load --no-interaction

make-entity: ## Create Doctrine entity (interactive)
	@echo "üìã Command: $(SYMFONY_CONSOLE) make:entity"
	@$(SYMFONY_CONSOLE) make:entity

make-migration: ## Create Doctrine migration
	@echo "üìã Command: $(SYMFONY_CONSOLE) make:migration"
	@$(SYMFONY_CONSOLE) make:migration

hello-doh: ## Symfony Hello World + DOH validation + CLI command
	@echo "üéº Creating Symfony Hello World..."
	@echo "üìã Command: $(SYMFONY_CONSOLE) make:controller HelloController --no-template"
	@$(SYMFONY_CONSOLE) make:controller HelloController --no-template
	@echo "üìã Command: $(SYMFONY_CONSOLE) make:command HelloCommand"
	@$(SYMFONY_CONSOLE) make:command HelloCommand
	@echo "ü§ñ AI will generate: HelloController route and HelloCommand CLI"
	@echo "üéØ DOH_HELLOWORLD validation included in web route and console command"

# =================================================================
# DEPENDENCY MANAGEMENT
# =================================================================

# Common targets (dev-setup, npm-install) are in Makefile.common

dev-setup: ## Install Symfony dependencies (composer + npm)
	@echo "üéº Installing Symfony dependencies..."
	@echo "üìã Command: ${EXEC_CONTAINER} ${APP_CONTAINER} composer install"
	@${EXEC_CONTAINER} ${APP_CONTAINER} composer install
	@echo "üìã Command: ${EXEC_CONTAINER} ${APP_CONTAINER} npm install"
	# ‚ö†Ô∏è Kitchen AI: Remove this line if no Webpack Encore/frontend needed
	# ‚ö†Ô∏è Kitchen AI: Replace with yarn/pnpm if detected or chosen
	@${EXEC_CONTAINER} ${APP_CONTAINER} npm install
	@echo "‚úÖ Symfony dependencies installed!"

composer-install: ## Install Composer/PHP dependencies
	@echo "üì¶ Installing Composer dependencies..."
	@echo "üìã Command: ${EXEC_CONTAINER} ${APP_CONTAINER} composer install"
	@${EXEC_CONTAINER} ${APP_CONTAINER} composer install

composer-update: ## Update Composer dependencies
	@echo "üìã Command: ${EXEC_CONTAINER} ${APP_CONTAINER} composer update"
	@${EXEC_CONTAINER} ${APP_CONTAINER} composer update

# =================================================================
# SSL & FRONTEND
# =================================================================

# Common targets (ssl-setup, frontend-dev, frontend-build) are in Makefile.common

frontend-watch: ## Start Symfony Webpack Encore watcher
	@echo "üé® Starting Symfony Webpack Encore watcher..."
	@echo "üìã Command: ${EXEC_CONTAINER} ${APP_CONTAINER} npm run watch"
	@${EXEC_CONTAINER} ${APP_CONTAINER} npm run watch

# =================================================================
# TESTING & QUALITY
# =================================================================

test: ## Run Symfony tests (PHPUnit)
	@echo "üß™ Running Symfony tests..."
	@echo "üìã Command: $(SYMFONY_CONSOLE) --env=test doctrine:database:create --if-not-exists"
	@$(SYMFONY_CONSOLE) --env=test doctrine:database:create --if-not-exists
	@echo "üìã Command: ${EXEC_CONTAINER} ${APP_CONTAINER} php bin/phpunit"
	@${EXEC_CONTAINER} ${APP_CONTAINER} php bin/phpunit

lint-check: ## Check code quality with PHP tools
	@echo "üîç Running PHP linters..."
	@echo "üìã Command: $(DOCKER_COMPOSE) run --rm linter php-cs-fixer fix --dry-run --diff ."
	@$(DOCKER_COMPOSE) run --rm linter php-cs-fixer fix --dry-run --diff .
	@$(DOCKER_COMPOSE) run --rm linter phpstan analyse src
	@$(DOCKER_COMPOSE) run --rm linter rector process --dry-run

lint-fix: ## Auto-fix code quality issues
	@echo "üîß Auto-fixing PHP code issues..."
	@echo "üìã Command: $(DOCKER_COMPOSE) run --rm linter php-cs-fixer fix ."
	@$(DOCKER_COMPOSE) run --rm linter php-cs-fixer fix .

# =================================================================
# SYMFONY MAKERS (Code Generation)
# =================================================================

make-controller: ## Create Symfony controller
	@echo "üìã Command: $(SYMFONY_CONSOLE) make:controller"
	@$(SYMFONY_CONSOLE) make:controller

make-form: ## Create Symfony form
	@echo "üìã Command: $(SYMFONY_CONSOLE) make:form"
	@$(SYMFONY_CONSOLE) make:form

make-crud: ## Create Symfony CRUD
	@echo "üìã Command: $(SYMFONY_CONSOLE) make:crud"
	@$(SYMFONY_CONSOLE) make:crud

make-user: ## Create Symfony user entity
	@echo "üìã Command: $(SYMFONY_CONSOLE) make:user"
	@$(SYMFONY_CONSOLE) make:user

# =================================================================
# PROCESS MANAGEMENT
# =================================================================

# Common process management targets (status, restart-web, restart-all) are in Makefile.common

# =================================================================
# HINTS & DEBUGGING
# =================================================================
# Commands always show exact Docker command before execution
# Symfony CLI: symfony new, symfony server:start, symfony check:requirements
# Console: php bin/console with all Symfony and Doctrine commands
# Makers: make:controller, make:entity, make:form, make:crud, etc.
# Use $(DOCKER_COMPOSE) with --env-file ./docker-compose.env