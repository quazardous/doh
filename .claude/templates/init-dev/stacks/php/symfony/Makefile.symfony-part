# DOH Symfony Extension for Makefile.seed
# =================================================================
# 
# ‚ö†Ô∏è THIS FILE EXTENDS Makefile.seed - NOT A STANDALONE MAKEFILE
# 
# AI GENERATION PROCESS:
# 1. Start with complete Makefile.seed content (foundation)
# 2. Add these Symfony-specific targets AFTER the seed
# 3. Result: ONE Makefile with seed + these additions
# 4. Remove redundant parts (help, common targets) - they're in seed
# 
# CRITICAL: These targets use variables from Makefile.seed:
# - $(DOCKER_COMPOSE) - Docker command with env-file
# - ${EXEC_CONTAINER} - For container execution
# - ${APP_CONTAINER} - Main app container name
# - All other patterns defined in seed
# =================================================================

# Symfony-specific commands - Real Symfony CLI
SYMFONY_CONSOLE = ${EXEC_CONTAINER} ${APP_CONTAINER} php bin/console

# Symfony-specific PHONY targets (common ones are in Makefile.seed)
.PHONY: symfony-new symfony-console symfony-cache-clear symfony-cache-warmup symfony-doctrine
.PHONY: doctrine-migrate doctrine-fixtures make-entity make-migration
.PHONY: composer-install composer-update make-controller make-form make-crud make-user
.PHONY: hello-doh lint-fix

# =================================================================
# SYMFONY-SPECIFIC CONFIG INITIALIZATION (extends seed env-config)
# =================================================================

env-config: ## Initialize local config files from -docker templates (Symfony + common)
	@echo "$(GREEN)Initializing Symfony configuration files...$(RESET)"
	# @AI-Kitchen: MERGE - Add to seed env-config target
	# This adds Symfony-specific files to the common ones from seed
	$(call copy-dist-config,./.env-docker,./.env)
	$(call copy-dist-config,./.env.local-docker,./.env.local)
	$(call copy-dist-config,./composer.json-docker,./composer.json)
	$(call copy-dist-config,./phpunit.xml.dist-docker,./phpunit.xml.dist)
	@echo "$(GREEN)Symfony configuration files ready! Customize as needed.$(RESET)"
	@echo "$(YELLOW)üí° Symfony-specific: .env, .env.local, composer.json, phpunit.xml.dist$(RESET)"

# NOTE: help target is in Makefile.seed
# NOTE: Common targets (dev, down, sh, logs) are in Makefile.seed

# =================================================================
# DOCUMENTATION
# =================================================================

# NOTE: help target is in Makefile.seed

# Common development environment targets (dev, down, sh, logs) are in Makefile.common

# =================================================================
# SYMFONY PROJECT INITIALIZATION
# =================================================================

symfony-new: ## Initialize Symfony project with Symfony CLI
	@echo "üéº Creating new Symfony project..."
	@echo "üìã Command: ${EXEC_CONTAINER} ${APP_CONTAINER} composer install"
	@${EXEC_CONTAINER} ${APP_CONTAINER} composer install
	@echo "üìã Command: ${EXEC_CONTAINER} ${APP_CONTAINER} symfony new {{PROJECT_NAME}} --version={{SYMFONY_VERSION}}"
	@${EXEC_CONTAINER} ${APP_CONTAINER} symfony new {{PROJECT_NAME}} --version={{SYMFONY_VERSION}}
	# Database automatically created by MARIADB_DATABASE/MYSQL_DATABASE environment variables
	@echo "‚úÖ Symfony project '{{PROJECT_NAME}}' initialized!"

symfony-console: ## Open Symfony console (interactive)
	@echo "üìã Command: $(SYMFONY_CONSOLE)"
	@$(SYMFONY_CONSOLE)

symfony-cache-clear: ## Clear Symfony cache
	@echo "üìã Command: $(SYMFONY_CONSOLE) cache:clear"
	@$(SYMFONY_CONSOLE) cache:clear

symfony-cache-warmup: ## Warmup Symfony cache
	@echo "üìã Command: $(SYMFONY_CONSOLE) cache:warmup"
	@$(SYMFONY_CONSOLE) cache:warmup

# =================================================================
# DOCTRINE DATABASE COMMANDS
# =================================================================

symfony-doctrine: ## Show Doctrine commands
	@echo "üìã Command: $(SYMFONY_CONSOLE) list doctrine"
	@$(SYMFONY_CONSOLE) list doctrine

# NOTE: Database creation is handled automatically by MariaDB/MySQL environment variables
# MARIADB_DATABASE/MYSQL_DATABASE creates the database automatically on container start

doctrine-migrate: ## Run Doctrine migrations
	@echo "üìã Command: $(SYMFONY_CONSOLE) doctrine:migrations:migrate"
	@$(SYMFONY_CONSOLE) doctrine:migrations:migrate

doctrine-fixtures: ## Load Doctrine fixtures
	@echo "üìã Command: $(SYMFONY_CONSOLE) doctrine:fixtures:load --no-interaction"
	@$(SYMFONY_CONSOLE) doctrine:fixtures:load --no-interaction

make-entity: ## Create Doctrine entity (interactive)
	@echo "üìã Command: $(SYMFONY_CONSOLE) make:entity"
	@$(SYMFONY_CONSOLE) make:entity

make-migration: ## Create Doctrine migration
	@echo "üìã Command: $(SYMFONY_CONSOLE) make:migration"
	@$(SYMFONY_CONSOLE) make:migration

hello-doh: ## Symfony Hello World + DOH validation + CLI command
	@echo "üéº Creating Symfony Hello World..."
	@echo "üìã Command: $(SYMFONY_CONSOLE) make:controller HelloController --no-template"
	@$(SYMFONY_CONSOLE) make:controller HelloController --no-template
	@echo "üìã Command: $(SYMFONY_CONSOLE) make:command HelloCommand"
	@$(SYMFONY_CONSOLE) make:command HelloCommand
	@echo "ü§ñ AI will generate: HelloController route and HelloCommand CLI"
	@echo "üéØ DOH_HELLOWORLD validation included in web route and console command"

# =================================================================
# DEPENDENCY MANAGEMENT
# =================================================================

# Common targets (dev-setup, npm-install) are in Makefile.common

dev-setup: env-config ## Install all dependencies (Symfony + Node.js if needed)
	@echo "üéº Installing Symfony dependencies..."
	@echo "üìã Command: ${EXEC_CONTAINER} ${APP_CONTAINER} composer install"
	@${EXEC_CONTAINER} ${APP_CONTAINER} composer install
	# @AI-Kitchen: CONDITIONAL - Include if frontend stack detected
	# @AI-Kitchen: CHOOSE - npm/yarn/pnpm based on lock files or user choice  
	# Example: @${EXEC_CONTAINER} ${APP_CONTAINER} npm install
	@echo "‚úÖ Symfony dependencies installed!"

composer-install: ## Install Composer/PHP dependencies
	@echo "üì¶ Installing Composer dependencies..."
	@echo "üìã Command: ${EXEC_CONTAINER} ${APP_CONTAINER} composer install"
	@${EXEC_CONTAINER} ${APP_CONTAINER} composer install

composer-update: ## Update Composer dependencies
	@echo "üìã Command: ${EXEC_CONTAINER} ${APP_CONTAINER} composer update"
	@${EXEC_CONTAINER} ${APP_CONTAINER} composer update

# =================================================================
# SSL & FRONTEND
# =================================================================

# Common targets (ssl-setup, frontend-dev, frontend-build) are in Makefile.common

frontend-watch: ## Start Symfony Webpack Encore watcher
	@echo "üé® Starting Symfony Webpack Encore watcher..."
	@echo "üìã Command: ${EXEC_CONTAINER} ${APP_CONTAINER} npm run watch"
	@${EXEC_CONTAINER} ${APP_CONTAINER} npm run watch

# =================================================================
# TESTING & QUALITY
# =================================================================

test: ## Run Symfony tests (PHPUnit)
	@echo "üß™ Running Symfony tests..."
	# Test database automatically created by MARIADB_DATABASE/MYSQL_DATABASE environment variables
	@echo "üìã Command: ${EXEC_CONTAINER} ${APP_CONTAINER} php bin/phpunit"
	@${EXEC_CONTAINER} ${APP_CONTAINER} php bin/phpunit

lint-check: ## Check code quality with PHP tools
	@echo "üîç Running PHP linters..."
	@echo "üìã Command: $(DOCKER_COMPOSE) run --rm linter php-cs-fixer fix --dry-run --diff ."
	@$(DOCKER_COMPOSE) run --rm linter php-cs-fixer fix --dry-run --diff .
	@$(DOCKER_COMPOSE) run --rm linter phpstan analyse src
	@$(DOCKER_COMPOSE) run --rm linter rector process --dry-run

lint-fix: ## Auto-fix code quality issues
	@echo "üîß Auto-fixing PHP code issues..."
	@echo "üìã Command: $(DOCKER_COMPOSE) run --rm linter php-cs-fixer fix ."
	@$(DOCKER_COMPOSE) run --rm linter php-cs-fixer fix .

# =================================================================
# SYMFONY MAKERS (Code Generation)
# =================================================================

make-controller: ## Create Symfony controller
	@echo "üìã Command: $(SYMFONY_CONSOLE) make:controller"
	@$(SYMFONY_CONSOLE) make:controller

make-form: ## Create Symfony form
	@echo "üìã Command: $(SYMFONY_CONSOLE) make:form"
	@$(SYMFONY_CONSOLE) make:form

make-crud: ## Create Symfony CRUD
	@echo "üìã Command: $(SYMFONY_CONSOLE) make:crud"
	@$(SYMFONY_CONSOLE) make:crud

make-user: ## Create Symfony user entity
	@echo "üìã Command: $(SYMFONY_CONSOLE) make:user"
	@$(SYMFONY_CONSOLE) make:user

# =================================================================
# PROCESS MANAGEMENT
# =================================================================

# Common process management targets (status, restart-web, restart-all) are in Makefile.common

# =================================================================
# HINTS & DEBUGGING
# =================================================================
# Commands always show exact Docker command before execution
# Symfony CLI: symfony new, symfony server:start, symfony check:requirements
# Console: php bin/console with all Symfony and Doctrine commands
# Makers: make:controller, make:entity, make:form, make:crud, etc.
# Use $(DOCKER_COMPOSE) with --env-file ./docker-compose.env