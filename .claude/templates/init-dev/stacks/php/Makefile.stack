# PHP/Laravel specific linting targets

lint-check: ## Check code style (no fixes)
	@echo "üîç PHP linting checks..."
	docker compose exec linter phpstan analyse src/ --level=5
	docker compose exec linter psalm --show-info=true
	docker compose exec linter phpcs --standard=PSR12 src/

lint-autofix: ## Auto-fix code style issues
	@echo "üîß PHP auto-fixes..."
	docker compose exec linter php-cs-fixer fix src/ --rules=@PSR12
	docker compose exec linter phpcbf --standard=PSR12 src/

format-code: ## Format/prettify code  
	@echo "‚ú® PHP formatting..."
	docker compose exec linter php-cs-fixer fix src/ --rules=@PSR12

# Laravel/PHP specific targets
composer-install: ## Install Composer dependencies
	docker compose exec ${APP_CONTAINER:-app} composer install

composer-update: ## Update Composer packages
	docker compose exec ${APP_CONTAINER:-app} composer update

artisan: ## Run artisan command (use: make artisan COMMAND="migrate")
	docker compose exec ${APP_CONTAINER:-app} php artisan $(COMMAND)

migrate: ## Run database migrations
	docker compose exec ${APP_CONTAINER:-app} php artisan migrate

migrate-fresh: ## Fresh migration with seed
	docker compose exec ${APP_CONTAINER:-app} php artisan migrate:fresh --seed

tinker: ## Open Laravel Tinker REPL
	docker compose exec ${APP_CONTAINER:-app} php artisan tinker

# Testing commands (Laravel uses APP_ENV=testing, Symfony uses APP_ENV=test)
phpunit: ## Run PHPUnit tests
	docker compose exec -e APP_ENV=testing ${APP_CONTAINER:-app} vendor/bin/phpunit

test: ## Run all tests (alias for phpunit)  
	docker compose exec -e APP_ENV=testing ${APP_CONTAINER:-app} vendor/bin/phpunit

test-symfony: ## Run tests for Symfony (APP_ENV=test)
	docker compose exec -e APP_ENV=test ${APP_CONTAINER:-app} vendor/bin/phpunit

test-filter: ## Run specific test (use: make test-filter FILTER="UserTest")
	docker compose exec -e APP_ENV=testing ${APP_CONTAINER:-app} vendor/bin/phpunit --filter=$(FILTER)

test-coverage: ## Run tests with coverage report
	docker compose exec -e APP_ENV=testing ${APP_CONTAINER:-app} vendor/bin/phpunit --coverage-html var/coverage

security-check: ## Run security audit
	docker compose exec linter composer audit

# Supervisord Process Management
status: ## Show supervisord process status
	docker compose exec ${APP_CONTAINER:-app} supervisorctl status

restart-web: ## Restart web server processes (PHP-FPM)
	docker compose exec ${APP_CONTAINER:-app} supervisorctl restart web:*

restart-workers: ## Restart queue worker processes only
	docker compose exec ${APP_CONTAINER:-app} supervisorctl restart workers:*

restart-all: ## Restart all processes
	docker compose exec ${APP_CONTAINER:-app} supervisorctl restart all

logs-web: ## Show web server logs
	docker compose exec ${APP_CONTAINER:-app} supervisorctl tail web:*

logs-workers: ## Show queue worker logs
	docker compose exec ${APP_CONTAINER:-app} supervisorctl tail workers:*

# Debug Workers (Alternative to supervisord)
worker-debug: ## Run single queue worker in foreground for debugging
	docker compose exec ${APP_CONTAINER:-app} php artisan queue:work --sleep=1 --tries=1 --max-time=600 --verbose

worker-shell: ## Open separate shell for manual worker debugging
	docker compose run --rm ${APP_CONTAINER:-app} /bin/bash

queue-stats: ## Show queue statistics and failed jobs
	docker compose exec ${APP_CONTAINER:-app} php artisan queue:monitor
	docker compose exec ${APP_CONTAINER:-app} php artisan queue:failed

queue-clear: ## Clear failed jobs queue
	docker compose exec ${APP_CONTAINER:-app} php artisan queue:flush