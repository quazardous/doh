services:
  # Main application container template - shows structure
  # This is overridden by stack-specific templates (stacks/python/service.yml, etc.)
  # the docker command is ran from the project root, so context is '.'
  app:
    build:
      context: .
      dockerfile: ./docker/app/Dockerfile
      args:
        UID: ${UID:-1000}
        GID: ${GID:-1000}
    environment:
      # Framework environment (injected BEFORE dotenv cascade, choose the right one for your stacks)
      - APP_ENV=${APP_ENV:-development}
      - NODE_ENV=${NODE_ENV:-development}
      - DJANGO_SETTINGS_MODULE=${DJANGO_SETTINGS_MODULE:-myapp.settings}
      # Database and other service connections
      - DATABASE_URL=${DATABASE_URL}
    user: ${UID:-1000}:${GID:-1000}
    volumes:
      - .:/app                                    # ALL application code (logs auto-visible in ./var/log/)
      #- ./docker/supervisord.conf:/etc/supervisor/supervisord.conf:ro  # Process config (if workers needed)
    labels:
      - "traefik.enable=true"
      - "dev.project=${PROJECT_NAME}"
      - "traefik.http.routers.app.rule=Host(`app.${PROJECT_NAME}.localhost`)"
      - "traefik.http.routers.app.entrypoints=websecure"
      - "traefik.http.routers.app.tls=true"
      - "traefik.http.services.app.loadbalancer.server.port=8000"
    networks:
      - default

  traefik:
    image: traefik:v3.1
    command:
      - "--configFile=/etc/traefik/traefik.yml"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./traefik.yml:/etc/traefik/traefik.yml:ro
      - ./dynamic.yaml:/etc/traefik/dynamic.yaml:ro
      - ./docker-dev/certs:/certs:ro
      - ./docker-dev/logs/traefik:/logs
    ports:
      - "${EXTERNAL_HTTP_PORT:-80}:80"
      - "${EXTERNAL_HTTPS_PORT:-443}:443"
      - "${TRAEFIK_DASHBOARD_PORT:-8080}:8080" # dashboard
    networks:
      - default

networks:
  default:
    driver: bridge